eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIG15LWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9vcGVuamRrODp2MS4xLjAKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBleHBvcnQgQVJUSUZBQ1RPUllfVVNFUj1wdHRnLWZzLXJvYm90CiAgICAgIC0gZXhwb3J0IEFSVElGQUNUT1JZX1BBU1M9JHtET0NLRVJfQVJUSUZBQ1RPUllfUEFTU1dPUkR9CiAgICAgIC0gZXhwb3J0IFBUVEdfR0hfVE9LRU49JHtQVFRHX0dIX1RPS0VOfQogICAgICAtIC4vZ3JhZGxldyBidWlsZAogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgbXktZG9ja2VyLWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wdHRnLWZzLWFwaToke0RST05FX0NPTU1JVF9TSEF9IC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIGJyYW5jaDogbWFzdGVyCgogIGltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrcHR0ZyIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcHR0Zy1mcy1hcGk6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgcHJlZGVwbG95OgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9VS0hvbWVPZmZpY2Uva3ViZS1wdHRnLWZzLWFwaS5naXQKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgZGVwbG95bWVudF0KICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgZGVwbG95X3RvX2RldjoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4zCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgICAtIEtVQkVfTkFNRVNQQUNFPXB0LWktZGV2CiAgICAgIC0gRU5WSVJPTk1FTlQ9ZGV2CiAgICAgIC0gVkVSU0lPTj0ke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gS1VCRV9TRVJWRVJfREVWPWh0dHBzOi8va3ViZS1kZXYuZHNwLm5vdHByb2QuaG9tZW9mZmljZS5nb3YudWsKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGt1YmUtcHR0Zy1mcy1hcGkKICAgICAgLSAuL2RlcGxveS5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgZGVwbG95X3RvX3Rlc3Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgICAgLSBLVUJFX05BTUVTUEFDRT1wdC1pLXRlc3QKICAgICAgLSBFTlZJUk9OTUVOVD10ZXN0CiAgICAgIC0gVkVSU0lPTj0ke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gS1VCRV9TRVJWRVJfREVWPWh0dHBzOi8va3ViZS1kZXYuZHNwLm5vdHByb2QuaG9tZW9mZmljZS5nb3YudWsKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGt1YmUtcHR0Zy1mcy1hcGkKICAgICAgLSAuL2RlcGxveS5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKICAgICAgZW52aXJvbm1lbnQ6IHRlc3QKCiAgZGVwbG95X3RvX3ByZXByb2Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgICAgLSBLVUJFX05BTUVTUEFDRT1wdC1pLXByZXByb2QKICAgICAgLSBFTlZJUk9OTUVOVD1wcmVwcm9kCiAgICAgIC0gVkVSU0lPTj0ke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gS1VCRV9TRVJWRVJfREVWPWh0dHBzOi8va3ViZS5kc3AuZGlnaXRhbC5ob21lb2ZmaWNlLmdvdi51awogICAgY29tbWFuZHM6CiAgICAgIC0gY2Qga3ViZS1wdHRnLWZzLWFwaQogICAgICAtIC4vZGVwbG95LnNoCiAgICB3aGVuOgogICAgICBldmVudDogZGVwbG95bWVudAogICAgICBlbnZpcm9ubWVudDogcHJlcHJvZAoKICBkZXBsb3lfdG9fcHJvZDoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4zCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgICAtIEtVQkVfTkFNRVNQQUNFPXB0LWktcHJvZAogICAgICAtIEVOVklST05NRU5UPXByb2QKICAgICAgLSBWRVJTSU9OPSR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBLVUJFX1NFUlZFUl9ERVY9aHR0cHM6Ly9rdWJlLmRzcC5kaWdpdGFsLmhvbWVvZmZpY2UuZ292LnVrCiAgICBjb21tYW5kczoKICAgICAgLSBjZCBrdWJlLXB0dGctZnMtYXBpCiAgICAgIC0gLi9kZXBsb3kuc2gKICAgIHdoZW46CiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CiAgICAgIGVudmlyb25tZW50OiBwcm9kCgpzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5Igo.bdfQQ-VA5zIQ_QPsUowJ-oNXwBVKmA7a1wpyrgFjIx4